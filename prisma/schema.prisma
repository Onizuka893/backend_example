generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String     @unique
  password  String
  name      String?
  sessions  Session[]
  bookings  Booking[]
  payments  Payment[]
  notifications Notification[]
  roles     UserRole[] // Many-to-many relationship with Role
}

model Session {
  id          String   @id @unique @db.VarChar()
  activeFrom  DateTime @default(now())
  activeUntil DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '1 day'"))
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Facility {
  id        String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  type      String     // E.g., "Meeting Room", "Gym", "Swimming Pool"
  location  String     // Address or area
  bookings  Booking[]
}

model Booking {
  id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  facility    Facility @relation(fields: [facilityId], references: [id])
  facilityId  String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid
  date        DateTime
  status      String    // E.g., "Pending", "Confirmed", "Cancelled"
  payment     Payment?  // Optional relation to Payment (one-to-one)
}

model Role {
  id    String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String     @unique // E.g., "Admin", "User"
  users UserRole[]
}

model UserRole {
  id     String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @db.Uuid
  role   Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String   @db.Uuid
}

model Payment {
  id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String   @unique  @db.Uuid
  amount      Float
  status      String    // E.g., "Paid", "Failed", "Refunded"
  createdAt   DateTime  @default(now())
}

model Notification {
  id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
  message     String
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
}