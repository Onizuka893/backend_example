// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// database schema elke user kan meerdere bookingen hebben,
// elk booking heeft een relatie met een facility,
// elk booking heeft ook een datum en tijd.

model User {
  id    String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String  @unique
  password String
  name  String?
  sessions Session[]
  bookings Booking[]
}

model Session {
  id          String   @id @unique @db.VarChar()
  activeFrom  DateTime @default(now())
  activeUntil DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '1 day'"))
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Facility {
  id    String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  bookings Booking[]
}

model Booking {
  id    String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  facility Facility @relation(fields: [facilityId], references: [id])
  facilityId String @db.Uuid
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  date DateTime
}